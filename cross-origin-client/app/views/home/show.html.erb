<h1>Home#show</h1>
<div
  id="cross-origin-storage-iframe"
  class="cross-origin-storage"
>
</div>

<%= javascript_tag nonce: true do -%>
  class CrossOriginStorageClient {
    constructor (window, iframeContainerId) {
      this.window = window;
      this.storageWindow = null;
      this.storageBaseUrl = 'http://localhost:3000'
      this.loadPromise = this.loadStorageIframe(iframeContainerId);
    }

    loadStorageIframe (iframeContainerId) {
      return new Promise((resolve) => {
        const containerEl = window.document.getElementById(iframeContainerId);
        const storageIframe = window.document.createElement('iframe');
        this.window.addEventListener('message', (event) => {
          if (event.data === 'loaded') {
            this.storageWindow = storageIframe.contentWindow;
            resolve();
          }
        });
        storageIframe.src = `${this.storageBaseUrl}/cross_origin_storage`;
        if (containerEl) {
          containerEl.appendChild(storageIframe);
        }
      });
    }

    // set key, value to the cross origin storage
    async set (key, value) {
      await this.loadPromise;
      console.log('Loaded Promise');
      if (this.storageWindow) {
        console.log('Start to post set event');
        this.storageWindow.postMessage({
          action: 'set',
          key,
          value,
        }, this.storageBaseUrl);
      }
    }

    // get key, value from the cross origin storage
    async get (key) {
      await this.loadPromise;
      return new Promise((resolve) => {
        const handler = (event) => {
          if (event.origin !== this.storageBaseUrl) {
            return;
          }
          const { action, key: returningKey, value } = event.data;
          if (action === 'returnData' && key === returningKey) {
            this.window.removeEventListener('message', handler);
            resolve(JSON.stringify(value));
          }
        };
        this.window.addEventListener('message', handler);
      });
    }
  }

  class CrossOriginStorageUsingCookie {
    constructor () {
      this.storageBaseUrl = 'http://localhost:3000';
    }

    // I also using get method for this one. If you want to use POST you need to config the CSRF too. Which is too complicated for this talk.
    async set (key, value) {
      const fetchInit = {
        method: 'GET',
        mode: 'cors',
        credentials: 'include',
      };
      return fetch(`${this.storageBaseUrl}/set_data_to_cookie?key=${key}&value=${value}`, fetchInit)
        .then((response) => response.json())
        .then((responseJson) => {
          return responseJson;
        });
    }

    async get (key) {
      const fetchInit = {
        method: 'GET',
        mode: 'cors',
        credentials: 'include',
      };
      return fetch(`${this.storageBaseUrl}/get_data_from_cookie?key=${key}`, fetchInit)
        .then((response) => response.json())
        .then((responseJson) => {
          return responseJson;
        });
    }
  }


  window.addEventListener('DOMContentLoaded', () => {
    const el = window.document.getElementById('cross-origin-storage-iframe');
    if (el) {
      console.log('Mai Le');
      const crossOriginStorage = new CrossOriginStorageClient(window, 'cross-origin-storage-iframe');
      crossOriginStorage.set('foo', 'Toi la nguoi dep trai nhat tren doi');
    }
  }, false);

  const crossOriginStorageUsingCookie = new CrossOriginStorageUsingCookie();
  crossOriginStorageUsingCookie.set('foo', 'Nuoc mat em lau bang tinh yeu moi').then(response => {
    console.log(response);
    crossOriginStorageUsingCookie.get('foo').then(response => {
      console.log(response);
    });
  });
<% end-%>
